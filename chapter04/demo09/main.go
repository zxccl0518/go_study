package main

import "fmt"

func main() {
	//位运算的演示 测试。

	// 2 &3 = ？ 与
	// 2 的补码:0000 0010    3的补码：0000 1111 ，进行按位与 运算  得到的补码是 0000 0010 答案是2
	fmt.Println("2&3 = ", 2&3)

	// 2|3 = ？  或
	// 2 的补码:0000 0010    3的补码：0000 1111 ，进行按位与 运算  得到的补码是 0000 0011 答案是2
	fmt.Println(" 2 | 3 = ", 2|3)

	// 2^3 = ?  异或
	// 2 的补码:0000 0010    3的补码：0000 1111 ，进行按位与 运算  得到的补码是 0000 0001 答案是1
	// 异或，相同为0 不同为1
	fmt.Println(" 2 ^ 3 = ", 2^3)

	// -2^3 = ?
	// -2 源码：1000 0010 ，反码：1111 1101，【反码->补码 +1】 补码：1111 1110， 3的补码： 0000 0011
	// 进行异或操作：1111 1101 但是这个是个补码，要还原回源码  => 反码【补码->反码 -1】 1111 1100 => 原码 【反码->原码 符号位不变，其他取反 1 000 0011】 最后结果是-3

	// >>  和 <<
	value1 := 1 >> 2
	value2 := 1 << 2

	fmt.Println("value1 = ", value1) // 0
	fmt.Println("value2 = ", value2) // 4

	// 位运算都是补码进行的。 正式的补码和反码 补码一致，负数的反码是 除了符号位都取反  补码是在反码的基础上+1
	// 左移<<, 右移>>  也是对补码进行运算的。

}
